* Cosmetics
#+BEGIN_SRC emacs-lisp
  (setq custom-safe-themes t)

  (straight-use-package 'modus-themes)
  (load-theme 'modus-operandi t)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  (defun my/disable-scroll-bars (frame)
    (modify-frame-parameters frame
			     '((vertical-scroll-bars . nil)
			       (horizontal-scroll-bars . nil))))
  (add-hook 'after-make-frame-functions 'my/disable-scroll-bars) 

  (show-paren-mode 1)
  (setq show-paren-style 'expression)
  (setq show-paren-when-point-in-periphery t)
  (setq show-paren-when-point-inside-paren nil)

  (add-hook 'text-mode-hook 'display-line-numbers-mode)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)

  (set-face-font 'default "hack-12")
  (setq default-frame-alist '((font . "hack-12"))) ;; set default font for emacs --daemon / emacsclient
#+END_SRC
* Bakcup Settings
#+BEGIN_SRC emacs-lisp
(setq
 backup-by-copying t      ; don't clobber symlinks
 backup-directory-alist '(("." . "~/.cache/emacs-backups/"))    ; don't litter my fs tree
 delete-old-versions t
 kept-new-versions 6
 kept-old-versions 2
 version-control t      ; use versioned backups
 auto-save-default nil)
#+END_SRC
* keybinds
#+BEGIN_SRC emacs-lisp
  (global-unset-key "\C-z")
#+END_SRC
* Programming
** ide features
#+BEGIN_SRC emacs-lisp
  (require 'flymake)
  (straight-use-package 'flymake)
  (straight-use-package 'flymake-diagnostic-at-point)
  (with-eval-after-load 'flymake
    (require 'flymake-diagnostic-at-point)
    (add-hook 'flymake-mode-hook #'flymake-diagnostic-at-point-mode))
  (straight-use-package 'company)
  (with-eval-after-load 'company
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous))
  (setq company-idle-delay 0
	company-minimum-prefix-length 2
	company-require-match 'never)
  (straight-use-package 'geiser)
  (straight-use-package 'eglot)
#+END_SRC
** languages
*** Haskell
 #+BEGIN_SRC emacs-lisp
   (straight-use-package 'haskell-mode)
 #+END_SRC
*** Common Lisp
 #+BEGIN_SRC emacs-lisp
   (straight-use-package 'slime)
   (setq inferior-lisp-program "sbcl")
 #+END_SRC
*** nix
#+begin_src emacs-lisp
    (straight-use-package 'nix-mode)
#+end_src
*** ocaml 
#+begin_src emacs-lisp
(straight-use-package 'tuareg)
#+end_src
*** web-dev
#+begin_src emacs-lisp 
  (straight-use-package 'web-mode)
  (straight-use-package 'company-web)
  (require 'company-web-html)
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-hook 'web-mode-hook (lambda ()
			     (set (make-local-variable 'company-backends) '(company-web-html company-css))))
#+end_src
* package configs
** misc package declarations
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'hydra)
  (straight-use-package 'magit)
 #+END_SRC
** Dired
 #+BEGIN_SRC emacs-lisp
   (require 'dired)
   (straight-use-package 'dired-hide-dotfiles)
   (add-hook 'dired-mode-hook 'dired-hide-details-mode)
   (add-hook 'dired-mode-hook 'dired-hide-dotfiles-mode)
   (setq dired-dwim-target t)
 #+END_SRC
** Minibuffer Tools
    #+begin_src emacs-lisp
      (straight-use-package 'vertico)
      (straight-use-package 'orderless)
      (straight-use-package 'marginalia)
      (straight-use-package 'consult)
      (straight-use-package 'embark)
      (marginalia-mode)
      (vertico-mode)
      (setq completion-styles '(orderless))
      (straight-use-package 'which-key)
      (which-key-mode t)
      (setq which-key-idle-delay 1.0)
    #+end_src
** Text editing
   #+BEGIN_SRC emacs-lisp
     (electric-pair-mode 1)
     (straight-use-package 'multiple-cursors)
     (global-set-key (kbd "C-c c")
		     (defhydra cqql-multiple-cursors-hydra (:hint nil)
		       "
	       ^Up^            ^Down^        ^Miscellaneous^
	  ----------------------------------------------
	  [_p_]   Next    [_n_]   Next    [_l_] Edit lines
	  [_P_]   Skip    [_N_]   Skip    [_a_] Mark all
	  [_M-p_] Unmark  [_M-n_] Unmark  [_q_] Quit"
		       ("l" mc/edit-lines :exit t)
		       ("a" mc/mark-all-like-this :exit t)
		       ("n" mc/mark-next-like-this)
		       ("N" mc/skip-to-next-like-this)
		       ("M-n" mc/unmark-next-like-this)
		       ("p" mc/mark-previous-like-this)
		       ("P" mc/skip-to-previous-like-this)
		       ("M-p" mc/unmark-previous-like-this)
		       ("q" nil)))

     (straight-use-package 'yasnippet)
     (straight-use-package 'yasnippet-snippets)

     (straight-use-package 'expand-region)
     (global-set-key (kbd "C-c e") 'er/expand-region)

     (straight-use-package 'visual-fill-column)
     (straight-use-package 'undo-tree)
     (global-undo-tree-mode)
   #+END_SRC
* navigation
#+begin_src emacs-lisp
  (straight-use-package 'ace-window)
  (setq aw-scope 'frame)
  (global-set-key (kbd "C-x o") 'ace-window)

  (winner-mode)
  (global-set-key (kbd "C-x 2") (lambda () (interactive)(split-window-vertically) (other-window 1)))
  (global-set-key (kbd "C-x 3") (lambda () (interactive)(split-window-horizontally) (other-window 1)))
  (setq isearch-lazy-count t)
#+end_src
* org
** org-mode
#+BEGIN_SRC emacs-lisp
  (require 'org-habit)
  (add-to-list 'org-modules "org-habit")
  (setq org-todo-repeat-to-state t) ;; repeats habit to state specified in properties
  (setq org-src-tab-acts-natively t) ;; native indentation inside org-mode blocks

  (setq org-todo-keywords
	(quote ((sequence "TODO(t)" "HABIT(h)" "SOMEDAY(s)" "NEXT(n)" "|" "DONE(d)")
		(sequence "WAITING(w@/!)" "|" "CANCELLED(c@/!)"))))

  (setq org-todo-keyword-faces
	(quote (("TODO" :foreground "red" :weight bold)
		("NEXT" :foreground "blue" :weight bold)
		("DONE" :foreground "forest green" :weight bold)
		("WAITING" :foreground "orange" :weight bold)
		("SOMEDAY" :foreground "orange" :weight bold)
		("CANCELLED" :foreground "forest green" :weight bold))))
#+END_SRC
** org-capture
#+BEGIN_SRC emacs-lisp
  (require 'org-capture)
  (setq org-capture-templates 
	'(("t" "todo" entry (file+headline "~/org/life.org" "Todo") "* TODO %?\n") ;; Creates a TODO headline in the entry "Todo". If there is a marked region, it will be copied over.
	  ("d" "someday" entry (file+headline "~/org/life.org" "Todo") "* SOMEDAY %?\n")
	  ("s" "scheduled" entry (file+headline "~/org/life.org" "Scheduled") "* TODO %?\n SCHEDULED: %^T \n") ;; Creates an headline under the entry "Scheduled" and it will ask for a date.
	  ("n" "notes/ideas" entry (file "~/org/notes.org")  "* %? :NOTE:\n")
	  ("h" "Habit" entry (file+headline "~/org/life.org" "Habit") "* NEXT %? :habit:\n%U\n\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n")
	  ))
  (global-set-key (kbd "<f11>") 'org-capture)
#+END_SRC
** org-agenda
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files '("~/org/")
	org-agenda-dim-blocked-tasks nil ;; Do not dim blocked tasks
	org-agenda-compact-blocks t ;; Compact the block agenda view
	org-use-fast-todo-selection t
	org-agenda-start-with-entry-text-mode t
	org-agenda-start-with-log-mode t
	org-agenda-custom-commands
	(quote (("n" "Notes/Ideas" tags "NOTE"
		 ((org-agenda-overriding-header "Notes/Ideas")
		  (org-tags-match-list-sublevels t)))
		("h" "Habits" tags-todo "STYLE=\"habit\""
		 ((org-agenda-overriding-header "Habits")
		  (org-agenda-sorting-strategy
		   '(todo-state-down effort-up category-keep))))
		(" " "agenda"
		 ((agenda "" nil) ;; first element
		  (tags-todo "/WAITING"
			     ((org-agenda-overriding-header "Waiting")))
		  (tags-todo "habit/-WAITING"
			     ((org-agenda-overriding-header "habits")))
		  (tags-todo "-habit/NEXT"
			     ((org-agenda-overriding-header "Next")))
		  (tags-todo "-habit/TODO"
			     ((org-agenda-overriding-header "Todo")))
		  (tags-todo "-habit/SOMEDAY"
			     ((org-agenda-overriding-header "Someday"))))))))
  (global-set-key (kbd "<f12>") 'org-agenda)



  (defun org-archive-done-tasks ()
    (interactive)
    (org-map-entries
     (lambda ()
       (org-archive-subtree)
       (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
     "/DONE" 'tree))

#+END_SRC
* writting
** Latex
#+BEGIN_SRC emacs-lisp
#+END_SRC
** spell checker
#+BEGIN_SRC emacs-lisp
(setq ispell-program-name "aspell")
#+END_SRC
* RSS
#+begin_src emacs-lisp
  (straight-use-package 'org)
  (straight-use-package 'elfeed)
  (straight-use-package 'elfeed-org)
  (require 'elfeed-org)
  (eval-after-load "org" '(elfeed-org))
  (setq rmh-elfeed-org-files (list "~/org/elfeed.org"))

  (defun elfeed-play-with-mpv ()
    "Play elfeed entry link with mpv."
    (interactive)
    (let ((entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single))))
      (message "Opening with mpv..." )
      (setq quality-arg "--ytdl-format=bestvideo[height<=?720][fps<=?30][vcodec!=?vp9]+bestaudio/best")
      (start-process "elfeed-mpv" nil "mpv" quality-arg (elfeed-entry-link entry))))
  ;;TODO Download videos
#+end_src
