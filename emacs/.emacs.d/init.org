* optimizations
#+begin_src emacs-lisp
  (setq gc-cons-threshold 100000000)
  (setq read-process-output-max (* 1024 1024 3)) ;; 1mb
#+end_src
* Cosmetics
#+BEGIN_SRC emacs-lisp
  (setq custom-safe-themes t)

  (straight-use-package 'modus-themes)
  (load-theme 'modus-operandi t)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)

  (defun my/disable-scroll-bars (frame)
    (modify-frame-parameters frame
			     '((vertical-scroll-bars . nil)
			       (horizontal-scroll-bars . nil))))
  (add-hook 'after-make-frame-functions 'my/disable-scroll-bars) 

  (show-paren-mode 1)
  (setq show-paren-style 'expression)
  (setq show-paren-when-point-in-periphery t)
  (setq show-paren-when-point-inside-paren nil)

  (add-hook 'text-mode-hook 'display-line-numbers-mode)
  (add-hook 'prog-mode-hook 'display-line-numbers-mode)

  (set-face-font 'default "hack-12")
  (setq default-frame-alist '((font . "hack-12"))) ;; set default font for emacs --daemon / emacsclient
#+END_SRC
* Bakcup Settings
#+BEGIN_SRC emacs-lisp
(setq
 backup-by-copying t      ; don't clobber symlinks
 backup-directory-alist '(("." . "~/.cache/emacs-backups/"))    ; don't litter my fs tree
 delete-old-versions t
 kept-new-versions 6
 kept-old-versions 2
 version-control t      ; use versioned backups
 auto-save-default nil)
#+END_SRC
* keybinds
#+BEGIN_SRC emacs-lisp
  (global-unset-key "\C-z")
#+END_SRC
* Programming
** ide features
#+BEGIN_SRC emacs-lisp
  (require 'flymake)
  (straight-use-package 'flymake)
  (straight-use-package 'flymake-diagnostic-at-point)
  (with-eval-after-load 'flymake
    (require 'flymake-diagnostic-at-point)
    (add-hook 'flymake-mode-hook #'flymake-diagnostic-at-point-mode))
  (straight-use-package 'company)
  (with-eval-after-load 'company
    (define-key company-active-map (kbd "C-n") 'company-select-next)
    (define-key company-active-map (kbd "C-p") 'company-select-previous))
  (setq company-idle-delay 0.3
	company-minimum-prefix-length 3
	company-require-match 'never)
  (straight-use-package 'geiser)
  (straight-use-package 'eglot)
#+END_SRC
** languages
*** Haskell
 #+BEGIN_SRC emacs-lisp
   (straight-use-package 'haskell-mode)
 #+END_SRC
*** Common Lisp
 #+BEGIN_SRC emacs-lisp
   (straight-use-package 'slime)
   (setq inferior-lisp-program "sbcl")
 #+END_SRC
*** nix
#+begin_src emacs-lisp
    (straight-use-package 'nix-mode)
#+end_src
*** ocaml 
#+begin_src emacs-lisp
(straight-use-package 'tuareg)
#+end_src
*** web-dev
#+begin_src emacs-lisp 
  (straight-use-package 'web-mode)
  (straight-use-package 'company-web)
  (require 'company-web-html)
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-hook 'web-mode-hook (lambda ()
			     (set (make-local-variable 'company-backends) '(company-web-html company-css))))
#+end_src
* Statistics
#+begin_src emacs-lisp
(straight-use-package 'ess)
#+end_src
* package configs
** misc package declarations
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'hydra)
  (straight-use-package 'magit)
 #+END_SRC
** Dired
 #+BEGIN_SRC emacs-lisp
   (require 'dired)
   (straight-use-package 'dired-hide-dotfiles)
   (add-hook 'dired-mode-hook 'dired-hide-details-mode)
   (add-hook 'dired-mode-hook 'dired-hide-dotfiles-mode)
   (setq dired-listing-switches "-lXGh --group-directories-first")
   (setq dired-dwim-target t)
 #+END_SRC
** Minibuffer Tools
    #+begin_src emacs-lisp
      (straight-use-package 'vertico)
      (straight-use-package 'orderless)
      (straight-use-package 'marginalia)
      (straight-use-package 'consult)
      (straight-use-package 'embark)
      (marginalia-mode)
      (vertico-mode)
      (setq completion-styles '(orderless))
      (straight-use-package 'which-key)
      (which-key-mode t)
      (setq which-key-idle-delay 1.0)
    #+end_src
** Text editing
   #+BEGIN_SRC emacs-lisp
     (electric-pair-mode 1)
     (straight-use-package 'multiple-cursors)
     (global-set-key (kbd "C-c c")
		     (defhydra cqql-multiple-cursors-hydra (:hint nil)
		       "
	       ^Up^            ^Down^        ^Miscellaneous^
	  ----------------------------------------------
	  [_p_]   Next    [_n_]   Next    [_l_] Edit lines
	  [_P_]   Skip    [_N_]   Skip    [_a_] Mark all
	  [_M-p_] Unmark  [_M-n_] Unmark  [_q_] Quit"
		       ("l" mc/edit-lines :exit t)
		       ("a" mc/mark-all-like-this :exit t)
		       ("n" mc/mark-next-like-this)
		       ("N" mc/skip-to-next-like-this)
		       ("M-n" mc/unmark-next-like-this)
		       ("p" mc/mark-previous-like-this)
		       ("P" mc/skip-to-previous-like-this)
		       ("M-p" mc/unmark-previous-like-this)
		       ("q" nil)))

     (straight-use-package 'yasnippet)
     (straight-use-package 'yasnippet-snippets)

     (straight-use-package 'expand-region)
     (global-set-key (kbd "C-c e") 'er/expand-region)

     (straight-use-package 'visual-fill-column)
     (straight-use-package 'undo-tree)
     (global-undo-tree-mode)
   #+END_SRC
* navigation
#+begin_src emacs-lisp
  (straight-use-package 'ace-window)
  (setq aw-scope 'frame)
  (global-set-key (kbd "C-x o") 'ace-window)

  (winner-mode)
  (global-set-key (kbd "C-x 2") (lambda () (interactive)(split-window-vertically) (other-window 1)))
  (global-set-key (kbd "C-x 3") (lambda () (interactive)(split-window-horizontally) (other-window 1)))
  (setq isearch-lazy-count t)
  (straight-use-package 'phi-search)
  ;; (global-set-key (kbd "C-s") 'phi-search)
  ;; (global-set-key (kbd "C-r") 'phi-search-backward)

  (straight-use-package 'highlight-indent-guides)
  (setq highlight-indent-guides-method 'character)

  (straight-use-package 'bufler)
  (global-set-key (kbd "C-x b") 'bufler-switch-buffer)
  (global-set-key (kbd "C-x C-b") 'bufler-list)

  (straight-use-package 'popper)
  (setq popper-reference-buffers
	'("\\*Messages\\*"
	  "Output\\*$"
	  "\\*Async Shell Command\\*"
	  help-mode
	  compilation-mode
	  shell-mode
	  "^\\*eshell.*\\*$" eshell-mode ;eshell as a popup
	  "^\\*shell.*\\*$"  shell-mode  ;shell as a popup
	  "^\\*term.*\\*$"   term-mode   ;term as a popup
	  "^\\*vterm.*\\*$"  vterm-mode  ;vterm as a popup
	  ))
  (global-set-key (kbd "C-«") 'popper-toggle-latest)
  (global-set-key (kbd "M-«") 'popper-toggle-type)
  (popper-mode +1)

  (require 'popper-echo)
  (popper-echo-mode +1)

  (straight-use-package 'beacon)
  (beacon-mode)
#+end_src
* org
** org-mode
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'org-contrib)
  (require 'org-habit)
  (add-to-list 'org-modules "org-habit")
  (setq org-todo-repeat-to-state t) ;; repeats habit to state specified in properties
  (setq org-src-tab-acts-natively t) ;; native indentation inside org-mode blocks

  (straight-use-package 'org-bullets)
  (require 'org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  
  (setq org-todo-keywords
	(quote ((sequence "TODO(t)" "HABIT(h)" "SOMEDAY(s)" "NEXT(n)" "|" "DONE(d)")
		(sequence "WAITING(w@/!)" "|" "CANCELLED(c@/!)" "REPEAT(r@/!)"))))

  (setq org-todo-keyword-faces
	(quote (("TODO" :foreground "red" :weight bold)
		("NEXT" :foreground "blue" :weight bold)
		("DONE" :foreground "forest green" :weight bold)
		("REPAT" :foreground "forest green" :weight bold)
		("WAITING" :foreground "orange" :weight bold)
		("SOMEDAY" :foreground "orange" :weight bold)
		("CANCELLED" :foreground "forest green" :weight bold))))
#+END_SRC
** org-capture
#+BEGIN_SRC emacs-lisp
  (require 'org-capture)
  (setq org-capture-templates 
	'(("t" "Tasks")
	  ("tt" "todo" entry (file+headline "~/org/life.org" "Todo") "* TODO %?\n") ;; Creates a TODO headline in the entry "Todo". If there is a marked region, it will be copied over.
	  ("tf" "future/someday" entry (file+headline "~/org/life.org" "Todo") "* SOMEDAY %?\n")
	  ("th" "Habit" entry (file+headline "~/org/life.org" "Habit") "* NEXT %? :habit:\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n")
	  ("ts" "scheduled" entry (file+headline "~/org/life.org" "Scheduled") "* TODO %?\nSCHEDULED: %^t \n") ;; Creates an headline under the entry "Scheduled" and it will ask for a date.
	  ("td" "deadline" entry (file+headline "~/org/life.org" "deadline") "* TODO %?\nDEADLINE: %^t \n") ;; Creates an headline under the entry "Scheduled" and it will ask for a date.
	  ("u" "university")
	  ("ut" "todo" entry (file+headline "~/org/university.org" "Todo") "* TODO %?\n") ;; Creates a TODO headline in the entry "Todo". If there is a marked region, it will be copied over.
	  ("uf" "future/someday" entry (file+headline "~/org/university.org" "Todo") "* SOMEDAY %?\n")
	  ("uh" "Habit" entry (file+headline "~/org/university.org" "Habit") "* NEXT %? :habit:\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n")
	  ("us" "scheduled" entry (file+headline "~/org/university.org" "Scheduled") "* TODO %?\nSCHEDULED: %^t \n") ;; Creates an headline under the entry "Scheduled" and it will ask for a date.
	  ("ud" "deadline" entry (file+headline "~/org/university.org" "deadline") "* TODO %?\nDEADLINE: %^t \n") ;; Creates an headline under the entry "Scheduled" and it will ask for a date.
	  ("n" "notes/ideas" entry (file "~/org/notes.org")  "* %? :NOTE:\n")
	  ("b" "book" entry (file+headline "~/org/books.org" "refile")  "* %?\n:PROPERTIES:\n:AUTHOR:\n:END:" :empty-lines 1)
	  ))

  (global-set-key (kbd "<f11>") 'org-capture)
#+END_SRC
** org-agenda
#+BEGIN_SRC emacs-lisp
    (setq org-agenda-files '("~/org/")
	  org-agenda-dim-blocked-tasks nil ;; Do not dim blocked tasks
	  org-agenda-compact-blocks t ;; Compact the block agenda view
	  org-use-fast-todo-selection t
					    ;org-agenda-start-with-entry-text-mode nil
	  org-agenda-custom-commands
	  (quote (("n" "Notes/Ideas" tags "NOTE"
		   ((org-agenda-overriding-header "Notes/Ideas")
		    (org-tags-match-list-sublevels t)))
		  ("h" "Habits" tags-todo "habit"
		   ((org-agenda-overriding-header "Habits")))
		  ("s" "Someday" tags-todo "/SOMEDAY"
		   ((org-agenda-overriding-header "Someday")))
		  (" " "life agenda"
		   ((agenda "" nil) ;; first element
		    (tags-todo "/WAITING"
			       ((org-agenda-overriding-header "Waiting")))
		    (tags-todo "habit/-WAITING"
			       ((org-agenda-overriding-header "habits")))
		    (tags-todo "-habit/NEXT"
			       ((org-agenda-overriding-header "Next")))
		    (tags-todo "-habit/TODO"
			       ((org-agenda-overriding-header "Todo")))
		    ))

		  ("d" "day agenda" agenda ""
		   ((org-agenda-span 1)
		    (org-deadline-warning-days 31)))
		  )))
    (global-set-key (kbd "<f12>") 'org-agenda)

    (defun my/today-date()
      (format-time-string "%Y-%m-%d %a" (current-time)))

    (defun my/org-time-stamp-inactive-string ()
     (with-temp-buffer
	(org-mode)
	(org-time-stamp-inactive nil nil)
	(buffer-substring (point-min) (point-max))))

    (defun my/org-archive-done-tasks ()
      (interactive)
      (org-map-entries
       (lambda ()
	 (org-archive-subtree)
	 (setq org-map-continue-from (org-element-property :begin (org-element-at-point))))
       "/DONE" 'tree))

  (defun my/org-todo-custom-date (&optional arg)
    "Like org-todo-yesterday, but prompt the user for a date. The time
  of change will be 23:59 on that day"
    (interactive "P")
    (let* ((hour (nth 2 (decode-time
			 (org-current-time))))
	   (daysback (- (date-to-day (current-time-string)) (org-time-string-to-absolute (org-read-date))))
	   (org-extend-today-until (+ 1 (* 24 (- daysback 1)) hour))
	   (org-use-effective-time t)) ; use the adjusted timestamp for logging
      (if (eq major-mode 'org-agenda-mode)
	(org-agenda-todo arg)
	(org-todo arg))))

#+END_SRC
** org-roam
#+begin_src emacs-lisp
  (straight-use-package 'org-roam)
  (straight-use-package 'consult-org-roam)
  (setq org-roam-directory "~/roam")
  (setq org-roam-v2-ack t)
  (setq org-roam-completion-everywhere t)

  (require 'org-roam)
  (org-roam-setup)

  (global-set-key (kbd "C-c n l") 'org-roam-buffer-toggle)
  (global-set-key (kbd "C-c n f") 'org-roam-node-find)
  (global-set-key (kbd "C-c n i") 'org-roam-node-insert)
  (global-set-key (kbd "C-c n t") 'org-roam-tag-add)
  (global-set-key (kbd "C-c n a") 'org-roam-alias-add)
  (define-key org-mode-map (kbd "C-M-i") 'completion-at-point)

  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:20}" 'face 'org-tag)))
#+end_src
*** org roam capture
#+begin_src emacs-lisp
  (setq org-roam-capture-templates
	'(("d" "default" plain
	   "%?"
	   :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
	   :unnarrowed t)
	  ("b" "book notes" plain
	   "\n* Source\n\nAuthor: %^{Author}\nTitle: ${title}\nYear: %^{Year}\n\n* notes\n\n%?"
	   :if-new (file+head "books/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
	   :unnarrowed t)
	  ("a" "notas das aulas" plain
	   "#+filetags: %^g\n%?"
	   :if-new (file+head "aulas/%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
	   :unnarrowed t)
	  ))
#+end_src
** org-project
#+begin_src emacs-lisp
  (straight-use-package '(org-project :type git :host github :repo "delehef/org-project"))
  (setq
   org-project-prompt-for-project t
   org-project-todos-per-project t
   org-project-per-project-file "todos.org"
   org-project-capture-template "* TODO %?\n") ;; Ask for a TODO and a date

  (define-key project-prefix-map "t" 'org-project-capture)
  (define-key project-prefix-map "o" 'org-project-open-todos)

#+end_src
** org-pomodoro
#+begin_src emacs-lisp
  (straight-use-package 'org-pomodoro)
  (setq org-pomodoro-short-break-length 20
	org-pomodoro-long-break-length 30
	org-pomodoro-length 90
	org-pomodoro-manual-break t
	org-pomodoro-audio-player "mpv"
	org-pomodoro-finished-sound-args "-volume 20"
	org-pomodoro-long-break-sound-args "-volume 20"
	org-pomodoro-short-break-sound-args "-volume 20"
	org-pomodoro-overtime-sound-args "-volume 20"
	org-pomodoro-ticking-sound-args "-volume 20")

  (add-hook 'org-pomodoro-break-finished-hook
  (lambda ()
    (interactive)
    (point-to-register 1)
    (org-clock-goto)
    (org-pomodoro)
    (register-to-point 1)))
#+end_src
** TODO calendar
#+begin_src emacs-lisp
  (straight-use-package 'calfw)
  (straight-use-package 'calfw-org)
  (require 'calfw)
  (require 'calfw-org)
  (global-set-key (kbd "<f9>")
		  'cfw:open-org-calendar)

#+end_src
* writting
#+begin_src emacs-lisp
(straight-use-package 'darkroom)
#+end_src
** Latex
#+BEGIN_SRC emacs-lisp
#+END_SRC
** markdown
#+begin_src emacs-lisp
  (straight-use-package 'markdown-mode)
  (straight-use-package 'poly-R)
  (add-to-list 'auto-mode-alist
             '("\\.[rR]md\\'" . poly-gfm+r-mode))
#+end_src
** spell checker
#+BEGIN_SRC emacs-lisp
(setq ispell-program-name "aspell")
#+END_SRC
** pdf
#+begin_src emacs-lisp
  (straight-use-package 'pdf-tools)
  (pdf-loader-install)
  ;;(add-hook 'org-mode-hook 'org-pdftools-setup-link)
#+end_src
* RSS
#+begin_src emacs-lisp
  (straight-use-package 'org)
  (straight-use-package 'elfeed)
  (straight-use-package 'elfeed-org)
  (require 'elfeed-org)
  (eval-after-load "org" '(elfeed-org))
  (setq rmh-elfeed-org-files (list "~/org/elfeed.org"))

  (defun elfeed-play-with-mpv ()
    "Play elfeed entry link with mpv."
    (interactive)
    (let ((entry (if (eq major-mode 'elfeed-show-mode) elfeed-show-entry (elfeed-search-selected :single))))
      (message "Opening with mpv..." )
      (setq quality-arg "--ytdl-format=bestvideo[height<=?720][fps<=?30][vcodec!=?vp9]+bestaudio/best")
      (start-process "elfeed-mpv" nil "mpv" quality-arg (elfeed-entry-link entry))))
  ;;TODO Download videos
#+end_src
